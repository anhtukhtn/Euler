//
//The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//
//1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
//Let us list the factors of the first seven triangle numbers:
//
//1: 1
//3: 1,3
//6: 1,2,3,6
//10: 1,2,5,10
//15: 1,3,5,15
//21: 1,3,7,21
//28: 1,2,4,7,14,28
//We can see that 28 is the first triangle number to have over five divisors.
//
//What is the value of the first triangle number to have over five hundred divisors?

func countDivisors(_ number: Int) -> Int {
  var primeDivisors = [Int:Int]()
  var currentDivisor = 2
  var remainding = number
  while remainding > 1 {
    while remainding % currentDivisor != 0 {
      currentDivisor += 1
    }
    remainding = remainding / currentDivisor
    primeDivisors[currentDivisor] = (primeDivisors[currentDivisor] ?? 0) + 1
    currentDivisor = 2
  }
  
  let allPrimeDivisors = Array(primeDivisors.keys)

  return allPrimeDivisors.reduce(1 , { result, key in
    result * (primeDivisors[key]! + 1)
  })
}

func firstTriangleOverDivisors(_ maxDivisors: Int) -> Int {
  var count = countDivisors(1)
  var triangleValue = 1
  var currentStep = 1
  
  while (count <= maxDivisors) {
    currentStep += 1
    triangleValue += currentStep
    count = countDivisors(triangleValue)
  }
  return triangleValue
}

print(firstTriangleOverDivisors(5))
print(firstTriangleOverDivisors(500))
